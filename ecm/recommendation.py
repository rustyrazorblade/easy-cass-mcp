"""Recommendation types for configuration and performance analysis.

This module defines the data structures for representing recommendations
generated by various analyzers in the system.
"""

from dataclasses import dataclass
from enum import Enum
from typing import Optional


class RecommendationCategory(Enum):
    """Categories of recommendations."""
    
    PERFORMANCE = "performance"
    CAPACITY = "capacity"
    BACKPRESSURE = "backpressure"
    CONFIGURATION = "configuration"
    SECURITY = "security"
    COMPACTION_STRATEGY = "compaction_strategy"
    JVM = "jvm"
    MEMORY = "memory"


class RecommendationPriority(Enum):
    """Priority levels for recommendations."""
    
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


@dataclass
class Recommendation:
    """Represents a configuration or performance recommendation.
    
    Attributes:
        recommendation: Brief description of the recommendation
        category: Category of the recommendation (performance, security, etc.)
        priority: Priority level (high, medium, low)
        reason: Detailed explanation of why this recommendation is made
        current: Current configuration or state (optional)
        suggested: Suggested configuration or action (optional)
        reference: URL or documentation reference (optional)
        pool_name: Name of the thread pool (for thread pool recommendations)
        type: Type of recommendation (e.g., for compaction strategies)
    """
    
    recommendation: str
    category: RecommendationCategory
    priority: RecommendationPriority
    reason: str
    current: Optional[str] = None
    suggested: Optional[str] = None
    reference: Optional[str] = None
    pool_name: Optional[str] = None
    type: Optional[str] = None